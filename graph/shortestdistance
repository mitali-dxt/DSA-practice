class Solution {
  public:
    void dfs(int n,vector<pair<int,int>> adj[],stack<int> &st,int vis[]){
        vis[n]=1;
        for(auto it:adj[n]){
            int v=it.first;
            if(!vis[v]){
            dfs(v,adj,st,vis);}
        }
        st.push(n);
    }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
         vector<pair<int,int>> adj[N];
         for(int i=0;i<M;i++){
             int u=edges[i][0];
             int v=edges[i][1];
             int d=edges[i][2];
             adj[u].push_back({v,d});
         }
         int vis[N]={0};
         stack <int> st;
         for(int i=0;i<N;i++){
             if(!vis[i]){
                 dfs(i,adj,st,vis);
             }
         }
         vector<int> dist(N);
         for (int i = 0; i < N; i++) {
        dist[i] = 1e9;
      }
         dist[0]=0;
         while(!st.empty()){
             int node=st.top();
             st.pop();
             for(auto it:adj[node]){
                 int v=it.first;
                 int d=it.second;
                 if(dist[node]+d<dist[v]){
                     dist[v]=dist[node]+d;
                 }
             }
         }
         for(int i=0;i<N;i++){
             if(dist[i]==1e9){
                 dist[i]=-1;
             }
         }
         return dist;
         
        // code here
    }
};