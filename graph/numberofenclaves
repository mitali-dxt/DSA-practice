/*You are given an n x m binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.

A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.

Find the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.*/

class Solution {
  public:
  void dfs(int r,int c,vector<vector<int>> &grid, vector<vector<int>> &vis, int delrow[],int delcol[]){
      int n=grid.size();
      int m=grid[0].size();
      vis[r][c]=1;
      for(int i=0;i<4;i++){
          int nr=r+delrow[i];
          int nc=c+delcol[i];
          if(nr>=0 && nr<n && nc>=0 && nc<m && !vis[nr][nc] && grid[nr][nc]==1){
              dfs(nr,nc,grid,vis,delrow,delcol);
          }
      }
      
      
  }
    int numberOfEnclaves(vector<vector<int>> &grid) {
        int n=grid.size();
        int m=grid[0].size();
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        vector<vector<int>> vis(n,vector<int>(m,0));
        for(int i=0;i<m;i++){
            if(!vis[0][i] && grid[0][i]==1){
                dfs(0,i,grid,vis,delrow,delcol);
                
            }
            if(!vis[n-1][i] && grid[n-1][i]==1){
                dfs(n-1,i,grid,vis,delrow,delcol);
            }
        }
        for(int i=0;i<n;i++){
            if(!vis[i][0] && grid[i][0]==1){
                dfs(i,0,grid,vis,delrow,delcol);
            }
            if(!vis[i][m-1] && grid[i][m-1]==1){
                dfs(i,m-1,grid,vis,delrow,delcol);
            }
        }
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]==1){
                    ans++;
                }
            }
        }
        return ans;
        
        // Code here
    }
};
