/*Given a matrix mat of size N x M where every element is either 'O' or 'X'. Replace all 'O' or a group of 'O' with 'X' that are surrounded by 'X'.
A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it.*/

/*graph problem*/
class Solution{
public:
    void dfs(int n,int m,int r,int c,vector<vector<char>>&mat,vector<vector<int>> &vis,int delrow[],int delcol[]){
        vis[r][c]=1;
        for(int i=0;i<4;i++){
            int nr=r+delrow[i];
            int nc=c+delcol[i];
            if(nr>=0 && nr<n && nc>=0 && nc<m && !vis[nr][nc] && mat[nr][nc]=='O'){
                dfs(n,m,nr,nc,mat,vis,delrow,delcol);
            }
            
        }
        
    }
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        vector<vector<int>> vis(n,vector<int>(m,0));
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        //check for boundary elements
        for(int i=0;i<m;i++){
            //check for first row
            if(!vis[0][i] && mat[0][i]=='O'){
                dfs(n,m,0,i,mat,vis,delrow,delcol);
            }
            //check for last row
            if(!vis[n-1][i] && mat[n-1][i]=='O')
            dfs(n,m,n-1,i,mat,vis,delrow,delcol);
        }
        //check for column boundary elements
        for(int i=0;i<n;i++){
            if(!vis[i][0] && mat[i][0]=='O')
            dfs(n,m,i,0,mat,vis,delrow,delcol);
            if(!vis[i][m-1] && mat[i][m-1]=='O')
            dfs(n,m,i,m-1,mat,vis,delrow,delcol);
        }
        //if unvisited O then convert to X
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && mat[i][j]=='O'){
                    mat[i][j]='X';
                }
            }
        }
        return mat;
        
        
        // code here
    }
};